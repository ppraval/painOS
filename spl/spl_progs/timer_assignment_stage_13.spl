breakpoint;

// store user sp to uptr in process table in word 13
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

//sp set to start of kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;
backup;

// pid of the currently executing process
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

[process_table_entry + 4] = READY;

// toggle b/w 3 process i.e round robin
alias newPID R2;
if (currentPID == 0) then
    newPID = 1;
else if(currentPID == 1) then
    newPID = 2;
else if(currentPID == 2) then
    newPID = 0;
endif;
endif;
endif;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

// reset kernel sp, ptbr, ptlr
SP = [new_process_table + 11] * 512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

// changin pid of system status table
[SYSTEM_STATUS_TABLE + 1] = newPID;

// if new process is in CREATED state
if ([new_process_table + 4] == CREATED) then
    [new_process_table + 4] = RUNNING;
    SP = [new_process_table + 13];
    ireturn;
endif;

[new_process_table + 4] = RUNNING;

restore;

[PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 12] = 0;
SP = [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 13];

breakpoint;

ireturn;
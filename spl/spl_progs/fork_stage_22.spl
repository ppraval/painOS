// Set mode flag to system call number - 8 for fork
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 8;

// store user stack pointer in UPTR
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

alias userSP R0;
userSP = SP;

// set SP to start of kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

multipush(R0);

// Calling get PCB entry
R1 = 1;
call PROCESS_MANAGER;
alias newPID R2;
newPID = R0;

multipop(R0);

if (newPID == -1) then // if not Free process is found then we direct iret
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    [[PTBR + 2 * ((userSP - 1)/512)] * 512 + (userSP - 1) % 512] = -1;
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
else
    // if heap pages for parent are not allocated
    if ([PTBR + 4] == -1) then
        multipush(R0, R1, R2);

        R1 = 1;
        call MEMORY_MANAGER;

        [PTBR + 4] = R0;
        [PTBR + 5] = "0110";

        R1 = 1;
        call MEMORY_MANAGER;

        [PTBR + 6] = R0;
        [PTBR + 7] = "0110";

        multipop(R0, R1, R2);
    endif;

    alias newPTBR R3;
    newPTBR = PAGE_TABLE_BASE + 20 * newPID;

    multipush(R0, R1, R2, R3);

    //allocating stack pages for child process
    R1 = 1;
    call MEMORY_MANAGER;

    [newPTBR + 16] = R0;
    [newPTBR + 17] = "0110";

    R1 = 1;
    call MEMORY_MANAGER;

    [newPTBR + 18] = R0;
    [newPTBR + 19] = "0110";

    multipop(R0, R1, R2, R3);

    multipush(R0, R1, R2, R3);

    // allocating code page for child process
    R1 = 1;
    call MEMORY_MANAGER;
    R5 = R0;

    multipop(R0, R1, R2, R3);

    [PROCESS_TABLE + newPID * 16 + 11] = R5;

    //initialization of process table for the child process
    // entries that are shared among parent and child
    [PROCESS_TABLE + newPID * 16 + 3] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 3]; // same userid
    [PROCESS_TABLE + newPID * 16 + 6] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 6]; //same swap flag
    [PROCESS_TABLE + newPID * 16 + 7] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7]; // same inode index
    [PROCESS_TABLE + newPID * 16 + 10] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 10]; // same user area swap status
    [PROCESS_TABLE + newPID * 16 + 13] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13]; // same UPTR - same user stack

    [PROCESS_TABLE + newPID * 16 + 0] = 0; // tick
    [PROCESS_TABLE + newPID * 16 + 2] = [SYSTEM_STATUS_TABLE + 1]; // parent pid
    [PROCESS_TABLE + newPID * 16 + 4] = CREATED; // state set to CREATED
    [PROCESS_TABLE + newPID * 16 + 9] = 0; //mode flag
    [PROCESS_TABLE + newPID * 16 + 12] = 0; //kernel stack is set to 0

    // initialization per process resourse table child
    alias i R4;
    i = RESOURCE_TABLE_OFFSET;
    while (i < 512) do
        [[PROCESS_TABLE + newPID * 16 + 11] * 512 + i] = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + i];
        [[PROCESS_TABLE + newPID * 16 + 11] * 512 + i + 1] = [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 + i + 1];
        if ([[PROCESS_TABLE + newPID * 16 + 11] * 512 + i] == 1) then // incrementing the process count for the shared semaphore in the semaphore table
            [SEMAPHORE_TABLE + [[PROCESS_TABLE + newPID * 16 + 11] * 512 + i + 1] * 4 + 1] = [SEMAPHORE_TABLE + [[PROCESS_TABLE + newPID * 16 + 11] * 512 + i + 1] * 4 + 1] + 1;
        endif;
        i = i + 1;
    endwhile;

    // disk map table for child
    i = 0;
    while (i < 10) do
        [DISK_MAP_TABLE + 10 * newPID + i] = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + i];
        i = i + 1;
    endwhile;

    // page table entries
    i = 0;
    while (i < 16) do
        [newPTBR + i] = [PTBR + i];
        [newPTBR + i + 1] = [PTBR + i + 1];
        if ([newPTBR + i] != -1) then
            [MEMORY_FREE_LIST + [newPTBR + i]] = [MEMORY_FREE_LIST + [newPTBR + i]] + 1; // since both parent and child both are utilizing
        endif;
        i = i + 2;
    endwhile;

    // copy user stack contents
    alias oldStack R5;
    alias newStack R6;

    oldStack = [PTBR + 16];
    newStack = [newPTBR + 16];
    i = 0;
    while (i < 512) do
        [newStack * 512 + i] = [oldStack * 512 + i];
        i = i + 1;
    endwhile;

    oldStack = [PTBR + 18];
    newStack = [newPTBR + 18];
    i = 0;
    while (i < 512) do
        [newStack * 512 + i] = [oldStack * 512 + i];
        i = i + 1;
    endwhile;

    //storing the BP on top of the kernel stack of the child process
    [[PROCESS_TABLE + newPID * 16 + 11] * 512] = BP;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

    // storing return values
    //PID of child as return value of parent
    [[PTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = newPID;
    //and 0 as return value of child
    [[newPTBR + 2 * ((userSP - 1) / 512)] * 512 + (userSP - 1) % 512] = 0;

    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];
endif;
ireturn;
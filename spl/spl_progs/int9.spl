// Set mode flag to system call number - 9 for exec
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

// store user stack pointer in UPTR
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

alias userSP R0;
userSP = SP;

// set SP to start of kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

alias physicalPageNumber R1;
alias offset R2;
alias physicalAddress R3;
alias page_table R5;

page_table = PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1];

physicalPageNumber = [page_table + 2 * ((userSP - 4) / 512)];
offset = (userSP - 4) % 512;
physicalAddress = physicalPageNumber * 512 + offset;

alias fileName R6;
fileName = [physicalAddress];

alias inodeIndex R7;
alias flag R8;

inodeIndex = 0;
flag = 0;

//checking if the given file is an exec or not
while (inodeIndex < MAX_FILE_NUM) do
    if (fileName == [INODE_TABLE + inodeIndex * 16 + 1]) then
        if ([INODE_TABLE + inodeIndex * 16] == EXEC) then
            flag = 1;
            break;
        endif;
    endif;
    inodeIndex = inodeIndex + 1;
endwhile;

if (flag == 0) then //the given file is not an exec
    physicalPageNumber = [page_table + 2 * ((userSP - 1) / 512)];
    offset = (userSP - 1) % 512;
    [physicalPageNumber * 512 + offset] = -1; //unsuccessful failure
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
    SP = userSP;
    ireturn;
endif;

multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8);

R1 = 3; //function number for exit process
R2 = [SYSTEM_STATUS_TABLE + 1]; //PID of the current process

call MOD_1; //calling process manager to deallocate resources

multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8);

alias userAreaPageNumber R9;
userAreaPageNumber = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];

//reclaim the same user area page for the kernel stack
[MEMORY_FREE_LIST + userAreaPageNumber] = [MEMORY_FREE_LIST + userAreaPageNumber] + 1;

//MEM_FREE_COUNT decrement
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = userAreaPageNumber * 512; //init of the kernel stack 

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7] = inodeIndex;

// Allocating pages for the new process
// Library 
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

// Heap - 2 pages
R1 = 1; // function number for get free page
call MOD_2; // calling memory manager module

[PTBR + 4] = R0; //page number
[PTBR + 5] = "0110";

R1 = 1;
call MOD_2;

[PTBR + 6] = R0;
[PTBR + 7] = "0110";

// Stack - 2 pages
R1 = 1;
call MOD_2;

[PTBR + 16] = R0;
[PTBR + 17] = "0110";

R1 = 1;
call MOD_2;

[PTBR + 18] = R0; 
[PTBR + 19] = "0110";

multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

// Code
alias numBlocks R10;
alias i R11;

i = 0;
numBlocks = (([INODE_TABLE + 16 * inodeIndex + 2] - 1) / 512) + 1;

multipush(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

while (i < 4) do
    if (i < numBlocks) then
        R1 = 1;
        call MOD_2;

        [PTBR + 8 + 2 * i] = R0;
        [PTBR + 9 + 2 * i] = "0100";
    else
        [PTBR + 8 + 2 * i] = -1;
        [PTBR + 9 + 2 * i] = "0000";
    endif;
    i = i + 1;
endwhile;

multipop(R0, R1, R2, R3, R4, R5, R6, R7, R8, R9);

// loading the code blocks into the memory pages
i = 0;
while (i < numBlocks) do
    loadi([PTBR + 8 + 2 * i], [INODE_TABLE + inodeIndex * 16 + 8 + i]);
    i = i + 1;
endwhile;

//pushing the ip when program starts to the top of the stack
[[PTBR + 16] * 512] = [[PTBR + 8] * 512 + 1];

SP = 8 * 512;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

ireturn;
//loading library code form disk
loadi(63, 13);
loadi(64, 14);

//loading inode user table
loadi(59, 3);
loadi(60, 4);

// loading disk free list
loadi(61, 2);

// loading root file
loadi(62, 5);

//loading timer code from disk
loadi(4, 17);
loadi(5, 18);

//loading disk interupt from disk
loadi(6, 19);
loadi(7, 20);

//loading console from disk
loadi(8, 21);
loadi(9, 22);

//loading exhandling code from disk
loadi(2, 15);
loadi(3, 16);

//loading int4 code from disk - create, delete
loadi(10, 23);
loadi(11, 24);

//loading int5 code from disk - file open, file close
loadi(12, 25);
loadi(13, 26);

//loading int6 code from disk - read
loadi(14, 27);
loadi(15, 28);

//loading int7 code from disk - write
loadi(16, 29);
loadi(17, 30);

//loading int8 code from disk - fork
loadi(18, 31);
loadi(19, 32);

//loading int9 code from disk - exec
loadi(20, 33);
loadi(21, 34);

//loading int10 code from disk - exit
loadi(22, 35);
loadi(23, 36);

//loading int11 code from disk - wait, signal, getpid, getppid
loadi(24, 37);
loadi(25, 38);

//loading int12 code from disk - logout
loadi(26, 39);
loadi(27, 40);

//loading int13 code from disk - semget, semrelease
loadi(28, 41);
loadi(29, 42);

//loading int14 code from disk - semlock, semunlock
loadi(30, 43);
loadi(31, 44);

//loading int15 code from disk - shutdown
loadi(32, 45);
loadi(33, 46);

//loading int16 code from disk - userops
loadi(34, 47);
loadi(35, 48);

//loading int17 code from disk - login
loadi(36, 49);
loadi(37, 50);

//loading resource manager - module 0 from disk
loadi(40, 53);
loadi(41, 54);

//loading Process Manager Module - module 1 from disk
loadi(42, 55);
loadi(43, 56);

//loading Memory Manager Module - module 2 from disk
loadi(44, 57);
loadi(45, 58);

// loading File Manger Module - module 3 from disk
loadi(46, 59);
loadi(47, 60);

//loading terminal write/read - module 4 from disk
loadi(48, 61);
loadi(49, 62);

//loading round robin - module 5 from disk
loadi(50, 63);
loadi(51, 64);

//loading init code from disk
loadi(65, 7);
//loadi(66, 8);

//loading shell process code from disk
loadi(67, 9);
loadi(68, 10);

//freeing the terminal
[TERMINAL_STATUS_TABLE] = 0;
//freeing the disk
[DISK_STATUS_TABLE] = 0;

//Memory free list initilization
alias i R0;
i = 0;
while (i < 128) do
    if (i < 76) then
        [MEMORY_FREE_LIST  + i] = 1; // Pages used for modules
    else
        [MEMORY_FREE_LIST + i] = 0; // Freeing pages
    endif;
    i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 0] = 1;
[SYSTEM_STATUS_TABLE + 2] = 47; // MEM_FREE_COUNT i.e 127 - 82 + 2 cuz 2 more pages are available
[SYSTEM_STATUS_TABLE + 3] = 0; // WAIT_MEM_COUNT

//since pid for init is 1
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//giving pages for init code
// pages for library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// pages for heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

// pages for code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// pages for stack
[PTBR + 16] = 66;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";

//process table for init
[PROCESS_TABLE + 16 + 1] = 1; //pid
[PROCESS_TABLE + 16 + 3] = 0; //userid of root
[PROCESS_TABLE + 16 + 4] = CREATED; //state
[PROCESS_TABLE + 16 + 11] = 77; //user area page number
[PROCESS_TABLE + 16 + 12] = 0; //kernel stack pointer
[PROCESS_TABLE + 16 + 13] = 8 * 512; //user stack pointer
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20; //ptbr
[PROCESS_TABLE + 16 + 15] = 10; //ptlr

//pushing the ip when init starts to the top of the stack
[66 * 512] = [65 * 512 + 1];

//setting per-process resource table for init
i = 1;
while (i < 9) do
    [([PROCESS_TABLE + 16 + 11] + 1) * 512 - 2 * i] = -1; // -1 == A free entry in the Resource identifire field
    i = i + 1;
endwhile;

// initilization of disk map table for init
[DISK_MAP_TABLE + 10 + 2] = -1; // heap
[DISK_MAP_TABLE + 10 + 3] = -1;
[DISK_MAP_TABLE + 10 + 4] = 7; // code
[DISK_MAP_TABLE + 10 + 5] = 8;
[DISK_MAP_TABLE + 10 + 6] = -1;
[DISK_MAP_TABLE + 10 + 7] = -1;
[DISK_MAP_TABLE + 10 + 8] = -1; // stack
[DISK_MAP_TABLE + 10 + 9] = -1; // stack

// initialization of semaphore table
i = 0;
while (i < MAX_SEM_COUNT) do
    [SEMAPHORE_TABLE + i * 4] = -1;
    [SEMAPHORE_TABLE + i * 4 + 1] = 0;
    i = i + 1;
endwhile;

// initialization of file status table
i = 0;
while (i < MAX_FILE_NUM) do
    [FILE_STATUS_TABLE + i * 4 + 0] = -1; // Locking pid
    [FILE_STATUS_TABLE + i * 4 + 1] = -1; // file open count
    i = i + 1;
endwhile;

// initialization of buffer table
i = 0;
while (i < MAX_BUFFER) do
    [BUFFER_TABLE + i * 4 + 0] = -1; // setting block number to -1
    [BUFFER_TABLE + i * 4 + 1] = 0; // dirty bit to 0
    [BUFFER_TABLE + i * 4 + 2] = -1; // setting locking pid to -1
    i = i + 1;
endwhile;

// initialization of open file table
i = 0;
while (i < MAX_OPENFILE_NUM) do
    [OPEN_FILE_TABLE + i * 4 + 0] = -1; //setting the inodeIndex to -1
    [OPEN_FILE_TABLE + i * 4 + 1] = 0; //setting the open instance count to 0
    i = i + 1;
endwhile;

//since pid for shell is 2
PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

//giving pages for shell code
// pages for library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// pages for heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

// pages for code
[PTBR + 8] = 67;
[PTBR + 9] = "0100";
[PTBR + 10] = 68;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// pages for stack
[PTBR + 16] = 78;
[PTBR + 17] = "0110";
[PTBR + 18] = 79;
[PTBR + 19] = "0110";

//process table for shell
[PROCESS_TABLE + 32 + 1] = 2; //pid of shell
[PROCESS_TABLE + 32 + 2] = 1; //ppid of shell is 1
[PROCESS_TABLE + 32 + 4] = TERMINATED; //state to avoid getting scheduled
[PROCESS_TABLE + 32 + 11] = 80; //user area page number
[PROCESS_TABLE + 32 + 12] = 0; //kernel stack pointer
[PROCESS_TABLE + 32 + 13] = 8 * 512; //user stack pointer
[PROCESS_TABLE + 32 + 14] = PAGE_TABLE_BASE + 40; //ptbr
[PROCESS_TABLE + 32 + 15] = 10; //ptlr

//pushing the ip when shell starts to the top of the stack
[78 * 512] = [67 * 512 + 1];

// initilization of disk map table for shell
[DISK_MAP_TABLE + 20 + 0] = -1; 
[DISK_MAP_TABLE + 20 + 1] = -1; 
[DISK_MAP_TABLE + 20 + 2] = -1; // heap
[DISK_MAP_TABLE + 20 + 3] = -1;
[DISK_MAP_TABLE + 20 + 4] = 9; // code
[DISK_MAP_TABLE + 20 + 5] = 10;
[DISK_MAP_TABLE + 20 + 6] = -1;
[DISK_MAP_TABLE + 20 + 7] = -1;
[DISK_MAP_TABLE + 20 + 8] = -1; // stack
[DISK_MAP_TABLE + 20 + 9] = -1; // stack

// setting using pages for shell
[MEMORY_FREE_LIST + 78] = 1;
[MEMORY_FREE_LIST + 79] = 1;
[MEMORY_FREE_LIST + 80] = 1;

//setting all other processes to terminated
i = 2;
while(i < 16) do
    [PROCESS_TABLE + i * 16 + 4] = TERMINATED;
    i = i + 1;
endwhile;

return;
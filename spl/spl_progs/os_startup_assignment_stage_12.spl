// loading idle code from from disk
loadi(69, 11);
loadi(70, 12);

//loading int7 code from disk
loadi(16, 29);
loadi(17, 30);

//loading library code form disk
loadi(63, 13);
loadi(64, 14);

//loading init code from disk
loadi(65, 7);
loadi(66, 8);

//loading int10 code from disk
loadi(22, 35);
loadi(23, 36);

//loading timer code from disk
loadi(4, 17);
loadi(5, 18);

//loading exhandling code from disk
loadi(2, 15);
loadi(3, 16);

// since pid for idle = 0
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//giving pages for idle code
//pages for library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//pages for heap
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";

//pages for code
[PTBR + 8] = 69;
[PTBR + 9] = "0100";
[PTBR + 10] = 70;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//pages for stack
[PTBR + 16] = 81;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";

//pushing the ip when idle starts to the top of the stack
[81 * 512] = [69 * 512 + 1];

//since pid for init is 1
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//giving pages for init code
// pages for library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

// pages for heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[PTBR + 6] = 79;
[PTBR + 7] = "0110";

// pages for code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

// pages for stack
[PTBR + 16] = 76;
[PTBR + 17] = "0110";
[PTBR + 18] = 77;
[PTBR + 19] = "0110";

//pushing the ip when init starts to the top of the stack
[76 * 512] = [65 * 512 + 1]; 

//process table for idle
[PROCESS_TABLE + 1] = 0; //pid
[PROCESS_TABLE + 4] = CREATED; //state
[PROCESS_TABLE + 11] = 82; //user area page number
[PROCESS_TABLE + 12] = 0; //kernal stack pointer
[PROCESS_TABLE + 13] = 8 * 512; //user stack pointer
[PROCESS_TABLE + 14] = PAGE_TABLE_BASE; //ptbr
[PROCESS_TABLE + 15] = 10; //ptlr

//process table for init
[PROCESS_TABLE + 16 + 1] = 1; //pid
[PROCESS_TABLE + 16 + 4] = RUNNING; //state
[PROCESS_TABLE + 16 + 11] = 80; //user area page number
[PROCESS_TABLE + 16 + 12] = 0; //kernel stack pointer
[PROCESS_TABLE + 16 + 13] = 8 * 512; //user stack pointer
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20; //ptbr
[PROCESS_TABLE + 16 + 15] = 10; //ptlr

//stack pointer
SP = 8 * 512;

//system status table
[SYSTEM_STATUS_TABLE + 1] = 1; // since pid of init is 1

ireturn;
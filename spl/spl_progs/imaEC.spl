breakpoint;
//setting modeflag to -1 for execption handler
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1;

// store user stack pointer in UPTR
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;

// set SP to start of kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

backup;

multipush(EIP);

//if execption cause is not a page fault or the user stack is full
if ((EC != 0) || ([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] == (PTLR * 512 - 1))) then
    if (EC == 0) then
        print "Stack overflow";
    endif;
    if (EC == 1) then
        print "Illegal instruction";
    endif;
    if (EC == 2) then
        print "Illegal memory access";
    endif;
    if (EC == 3) then
        print "Arithmetic Exception";
    endif;

    multipush(R0);
    //calling exit_process() from process manager
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    //calling scheduler
    call MOD_5;

    multipop(R0);
else
    alias blockNumber R2;
    if (EPN > 3 && EPN < 8) then // code page
        blockNumber = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + EPN];

        multipush(R0, R1, R2);
        multipush(EPN);
        R1 = 5;
        R2 = blockNumber;
        call MOD_2;

        multipop(EPN);
        [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 2 * EPN] = R0;
        [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1] * 20 + 2 * EPN + 1] = "1100";

        multipop(R0, R1, R2);
    else
        // Heap page
        multipush(R0, R1, R2);

        R1 = 1;
        call MOD_2;
        [PTBR + 4] = R0;
        [PTBR + 5] = "1110";

        R1 = 1;
        call MOD_2;
        [PTBR + 6] = R0;
        [PTBR + 7] = "1110";

        multipop(R0, R1, R2);
    endif;
endif;

//setting modeflag back to zero
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

multipop(EIP);

restore;
//setting sp to user stack sp
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13];

//incrementing sp and store EIP to top of SP to retry
SP = SP + 1;
[[PTBR + 2 * (SP / 512)] * 512 + (SP % 512)] = EIP;

ireturn;iamthope@Puter:~/myexpos/spl/spl_progs$ cat int6.spl
// Set mode flag to system call number - 7 for read
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;

alias userSP R0;
userSP = SP;

// store user stack pointer in UPTR
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = userSP;

// set SP to start of kernel stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11] * 512 - 1;

alias physicalPageNumber R1;
alias offset R2;
alias physicalAddress R3;
alias page_table R5;

page_table = PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1];

physicalPageNumber = [page_table + 2 * ((userSP - 4) / 512)];
offset = (userSP - 4) % 512;
physicalAddress = physicalPageNumber * 512 + offset;

alias fileDescriptor R4;
fileDescriptor = [physicalAddress];

if (fileDescriptor != -1) then
    physicalPageNumber = [page_table + 2 * ((userSP - 1) / 512)];
    offset = (userSP - 1) % 512;
    [physicalPageNumber * 512 + offset] = -1;
else
    physicalPageNumber = [page_table + 2 * ((userSP - 3) / 512)];
    offset = (userSP - 3) % 512;
    physicalAddress = physicalPageNumber * 512 + offset;

    // storing the context
    multipush(R0, R1, R2, R3, R4, R5);

    alias arg1 R1; // Function number
    alias arg2 R2; // PID
    alias arg3 R3; // word to be read
    arg1 = 4;
    arg2 = [SYSTEM_STATUS_TABLE + 1];
    arg3 = [physicalAddress];

    call MOD_4;

    multipop(R0, R1, R2, R3, R4, R5);

    physicalPageNumber = [page_table + 2 * ((userSP - 1) / 512)];
    offset = (userSP - 1) % 512;
    [physicalPageNumber * 512 + offset] = 0;
endif;

SP = userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

R10 = "---------";
print R10;
print "int6";
print R10;
ireturn
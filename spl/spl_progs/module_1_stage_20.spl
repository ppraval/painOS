alias functionNumber R1;
alias currentPID R2;

// get pcb entry
if (functionNumber == 1) then
    alias i R3;
    i = 1;
    while (i < 16) do //finding a free process table entry
        if ([PROCESS_TABLE + i * 16 + 4] == TERMINATED) then
            break;
        endif;
        i = i + 1;
    endwhile;
    if (i == 16) then //if no free process we return -1
        R0 = -1;
    else
        [PROCESS_TABLE + i * 16 + 1] = i; //PID = index of the free entry
        [PROCESS_TABLE + i * 16 + 4] = ALLOCATED; // setting the state to allocated
        [PROCESS_TABLE + i * 16 + 14] = PAGE_TABLE_BASE + (20 * i); //PTBR 
        [PROCESS_TABLE + i * 16 + 15] = 10; //PTLR
        R0 = i;
    endif;
    return;
endif;

// free user areaPage
if (functionNumber == 2) then
    alias userAreaPageNumber R3;
    userAreaPageNumber = [PROCESS_TABLE + 16 * currentPID + 11];
    multipush(R1, R2, R3);
    R1 = 2;
    R2 = userAreaPageNumber;
    call MOD_2;
    multipop(R1, R2, R3);

    return;
endif;

// exit process
if (functionNumber == 3) then
    multipush(R1, R2);

    // to free page table
    R1 = 4;
    R2 = currentPID;
    call MOD_1;

    // to free user area page
    R1 = 2;
    R2 = currentPID;
    call MOD_1;

    multipop(R1, R2);

    [PROCESS_TABLE + 16 * currentPID + 4] = TERMINATED;
    return;
endif;

// free page table
if (functionNumber == 4) then
    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";

    alias i R3;
    alias pageNumber R4;

    i = 1;
    while (i < (PTLR - 1)) do
        pageNumber = [PTBR + 2 + 2 * i];
        if (pageNumber != -1) then
            multipush(R1, R2, R3, R4);

            // to release page
            R1 = 2;
            R2 = pageNumber;
            call MOD_2;

            multipop(R1, R2, R3, R4);

            [PTBR + 2 + 2 * i] = -1;
            [PTBR + 3 + 2 * i] = "0000";
        endif;
        i = i + 1;
    endwhile;

    i = 2;
    while (i < 10) do // looping through all the entries in disk map table
        if ([DISK_MAP_TABLE + currentPID * 10 + i] != -1) then
            if (i < 4 || i > 7) then // those disk for heap and stack are invalidated
                multipush(R1, R2, R3, R4);

                R1 = 4;
                R3 = currentPID;
                R2 = [DISK_MAP_TABLE + currentPID * 10 + i];
                //by calling release block
                call MOD_2;

                multipop(R1, R2, R3, R4);
            endif;
            [DISK_MAP_TABLE + currentPID * 10 + i] = -1; //invalidate all entries of the disk map table
        endif;
        i = i + 1;
    endwhile;

    return;
endif;
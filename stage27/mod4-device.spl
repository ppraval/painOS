// breakpoint;
alias functionNum R1;
alias currentPID R2;

// Disk Store
if (functionNum == DISK_STORE) then
	alias pageNumber R3;
	alias blockNumber R4;

	multipush (R1, R2, R3, R4);
	R1 = ACQUIRE_DISK;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop  (R1, R2, R3, R4);

	[DISK_STATUS_TABLE + 0] = 1;
	[DISK_STATUS_TABLE + 1] = 1;
	[DISK_STATUS_TABLE + 2] = pageNumber;
	[DISK_STATUS_TABLE + 3] = blockNumber;
	[DISK_STATUS_TABLE + 4] = currentPID;

	store (pageNumber, blockNumber);

	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = WAIT_DISK;

	multipush (R1, R2, R3, R4);
	call SCHEDULER;
	multipop  (R1, R2, R3, R4);

	// breakpoint;
	return;
endif;

// Disk Load
if (functionNum == DISK_LOAD) then
	multipush (R1, R2, R3, R4);
	R1 = ACQUIRE_DISK;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop  (R1, R2, R3, R4);

	alias pageNumber R3;
	alias blockNumber R4;
	[DISK_STATUS_TABLE + 0] = 1;
	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = pageNumber;
	[DISK_STATUS_TABLE + 3] = blockNumber;
	[DISK_STATUS_TABLE + 4] = currentPID;

	load (pageNumber, blockNumber);
	[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;

	multipush (R1, R2, R3, R4);
	call SCHEDULER;
	multipop  (R1, R2, R3, R4);

	// breakpoint;
	return;
endif;


// Terminal Write
if(functionNum == TERMINAL_WRITE) then
	multipush(R1,R2,R3);
	R1 = ACQUIRE_TERMINAL;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3);
	
	print R3;
	
	multipush(R1,R2,R3);
	R1 = RELEASE_TERMINAL;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop(R1, R2,R3);
	
	// breakpoint;
	return;
endif;

//Terminal Read
if(functionNum == TERMINAL_READ) then

	multipush(R1,R2,R3);
	R1 = ACQUIRE_TERMINAL;
	R2 = currentPID;
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3);
	
	read;
	
	[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
	
	multipush(R1,R2,R3);
	call SCHEDULER;
	multipop(R1,R2,R3);
	
	alias physicalAddr R4;
	physicalAddr = [PTBR + 2 * ((R3)/512)] * 512 + (R3)%512;
	[physicalAddr] = [PROCESS_TABLE + (currentPID * 16) + 8];
	
	// breakpoint;
	return;
endif;

// breakpoint;
return;

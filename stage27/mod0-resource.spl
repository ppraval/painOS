// breakpoint;
alias functionNum R1;

if (functionNum == ACQUIRE_BUFFER) then
	alias bufferIndex R2;
	alias currentPID R3;

	while ([BUFFER_TABLE + bufferIndex*4 + 2] != -1) do
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = WAIT_BUFFER;
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 5] = bufferIndex;

		multipush (R1, R2, R3);
		call SCHEDULER;
		multipop  (R1, R2, R3);
	endwhile;

	[BUFFER_TABLE + bufferIndex*4 + 2] = currentPID;
	R0 = 0;
	// breakpoint;
	return;
endif;

if (functionNum == RELEASE_BUFFER) then
	alias bufferIndex R2;
	alias currentPID R3;

	if ([BUFFER_TABLE + bufferIndex*4 + 2] != currentPID) then
		R0 = -1;
		return;
	endif;

	[BUFFER_TABLE + bufferIndex*4 + 2] = -1;

	alias counter R5;
	counter = 0;
	while (counter < MAX_PROC_NUM) do
		if ([PROCESS_TABLE + counter*16 + 4] == WAIT_BUFFER && [PROCESS_TABLE + counter*16 + 5] == bufferIndex) then
			[PROCESS_TABLE + counter*16 + 4] = READY;
		endif;
		counter = counter + 1;
	endwhile;

	R0 = 0;
	// breakpoint;
	return;
endif;

// acquire Disk
if (functionNum == ACQUIRE_DISK) then
	alias currentPID R2;
	while ([DISK_STATUS_TABLE + 0] == 1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
		multipush (R1, R2);
		call SCHEDULER;
		multipop  (R1, R2);
	endwhile;

	[DISK_STATUS_TABLE + 0] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;

	// breakpoint;
	return;
endif;

// acquire inode
if (functionNum == ACQUIRE_INODE) then
	alias inodeIndex R2;
	alias currentPID R3;

	while ([FILE_STATUS_TABLE + 4*inodeIndex] != -1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_FILE;
		[PROCESS_TABLE + currentPID*16 + 5] = inodeIndex;

		multipush (R1, R2, R3);
		call SCHEDULER;
		multipop  (R1, R2, R3);
	endwhile;

	if ([INODE_TABLE + 16*inodeIndex + 1] == -1) then
		R0 = -1;
		// breakpoint;
		return;
	endif;

	[FILE_STATUS_TABLE + 4*inodeIndex] = currentPID;
	R0 = 0;

	// breakpoint;
	return;
endif;

// release inode
if (functionNum == RELEASE_INODE) then
	alias inodeIndex R2;
	alias currentPID R3;
	if ([FILE_STATUS_TABLE + 4*inodeIndex] != currentPID) then
		R0 = -1;
		// breakpoint;
		return;
	endif;

	[FILE_STATUS_TABLE + 4*inodeIndex] = -1;

	alias counter R5;
	counter = 0;
	while (counter < MAX_PROC_NUM) do
		if ([PROCESS_TABLE + counter*16 + 4] == WAIT_FILE && [PROCESS_TABLE + counter*16 + 5] == inodeIndex) then
			[PROCESS_TABLE + counter*16 + 4] = READY;
		endif;
		counter = counter + 1;
	endwhile;

	R0 = 0;
	// breakpoint;
	return;
endif;

// acquire semaphore
if (functionNum == ACQUIRE_SEMAPHORE) then
	alias currentPID R2;
	alias counter R5;
	counter = 0;
	while (counter < MAX_SEM_COUNT) do
		if ([SEMAPHORE_TABLE + 4*counter + 1] == 0) then
			[SEMAPHORE_TABLE + 4*counter + 0] = -1;
			[SEMAPHORE_TABLE + 4*counter + 1] = 1;
			R0 = counter;
			
			// breakpoint;
			return;
		endif;
		counter = counter + 1;
	endwhile;

	R0 = -1;

	// breakpoint;
	return;
endif;

// release semaphore
if (functionNum == RELEASE_SEMAPHORE) then
	alias semTableIndex R2;
	alias currentPID R3;

	if ([SEMAPHORE_TABLE + semTableIndex*4] == currentPID) then
		[SEMAPHORE_TABLE + semTableIndex*4] = -1;
		alias counter R5;
		counter = 0;
		while (counter < MAX_PROC_NUM) do
			if ([PROCESS_TABLE + counter*16 + 4 == WAIT_SEMAPHORE] && [PROCESS_TABLE + counter*16 + 5] == semTableIndex) then
				[PROCESS_TABLE + counter*16 + 4] = READY;
			endif;
			counter = counter + 1;
		endwhile;

		[SEMAPHORE_TABLE + semTableIndex*4 + 1] = [SEMAPHORE_TABLE + semTableIndex*4 + 1] - 1;
		R0 = 0;

		// breakpoint;
		return;
	endif;

	R0 = -1;

	// breakpoint;
	return;
endif;

//acquire terminal
if(functionNum == ACQUIRE_TERMINAL) then
	alias currentPID R2;

	while([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
		multipush(R1,R2);
		call SCHEDULER;
		multipop(R1,R2);
	endwhile;
	
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE+1] = currentPID;
	
	// breakpoint;
	return;
endif;

//release terminal
if(functionNum == RELEASE_TERMINAL) then 
	alias currentPID R2;

	if([TERMINAL_STATUS_TABLE + 1] != currentPID) then
		R0 = -1;
		// breakpoint;
		return;
	
	else
		[TERMINAL_STATUS_TABLE] = 0;
			
		alias i R3;
		i = 0;
			
		while(i < 16) do
			if([PROCESS_TABLE + (i * 16) + 4] == WAIT_TERMINAL) then
				[PROCESS_TABLE + (i * 16) + 4] = READY;
			endif;
			i = i + 1;
		endwhile;
		
		R0 = 0;	
		// breakpoint;
		return;
	endif;
endif;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11] * 512 - 1;
backup;

alias counter R5;

if ([SYSTEM_STATUS_TABLE + 5] != 0) then
	if ([SYSTEM_STATUS_TABLE+1] == SWAPPER_DAEMON) then
		if ([SYSTEM_STATUS_TABLE+5] == SWAP_OUT) then
			R1 = SWAP_OUT;
			R2 = [SYSTEM_STATUS_TABLE+1];
			call PAGER_MODULE;
		endif;

		if ([SYSTEM_STATUS_TABLE+5] == SWAP_IN) then
			R1 = SWAP_IN;
			R2 = [SYSTEM_STATUS_TABLE+1];
			call PAGER_MODULE;
		endif;
	endif;
else 
	if ([SYSTEM_STATUS_TABLE+2] < MEM_LOW) then
		[SYSTEM_STATUS_TABLE+5] = SWAP_OUT;
	else 
		if ([SYSTEM_STATUS_TABLE+4] > 0) then
			counter = 3;
			alias swapinPID R1; 
			swapinPID = -1;

			while (counter < MAX_PROC_NUM-1) do
				if ([PROCESS_TABLE + counter*16 + 6] == 1 && [PROCESS_TABLE + counter*16 + 0] > MAX_TICK) then
					swapinPID = counter;
					break;
				endif;
				counter = counter + 1;
			endwhile;

			if (swapinPID != -1 || [SYSTEM_STATUS_TABLE+2] > MEM_HIGH) then
				[SYSTEM_STATUS_TABLE+5] = SWAP_IN;
			endif;
		endif;
	endif;
endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = READY;

counter = 0;
while(counter < 16) do
	if([PROCESS_TABLE + counter*16 + 4] != TERMINATED) then
		[PROCESS_TABLE + counter*16] = [PROCESS_TABLE + counter*16] + 1;
	endif;
	counter = counter + 1;
endwhile;

call SCHEDULER;
restore;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13];
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;

ireturn;
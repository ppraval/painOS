// breakpoint;
alias functionNum R1;

// get free page
if (functionNum == GET_FREE_PAGE) then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while ([SYSTEM_STATUS_TABLE + 2] == 0) do
        [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 4] = WAIT_MEM;
        call SCHEDULER;
    endwhile;

    // memory wait count
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1; 

    // memory free count
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

    alias counter R5;
    counter = 76;
    while (counter < 128) do 
        if ([MEMORY_FREE_LIST + counter] == 0) then
            [MEMORY_FREE_LIST + counter] = 1;
            R0 = counter;
            // breakpoint;
            return;
        endif;
        counter = counter + 1;
    endwhile;

    R0 = -1;
    // breakpoint;
    return;
endif;

// release page
if (functionNum == RELEASE_PAGE) then
    alias pageNumber R2;
    [MEMORY_FREE_LIST + pageNumber] = [MEMORY_FREE_LIST + pageNumber] - 1;
    if ([MEMORY_FREE_LIST + pageNumber] == 0 && pageNumber >= 76) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;

    alias counter R5;
    counter = 0;
    while (counter < 16) do
        if ([PROCESS_TABLE + counter*16 + 4] == WAIT_MEM) then
            [PROCESS_TABLE + counter*16 + 4] = READY;
        endif;
        counter = counter + 1;
    endwhile;

    // breakpoint;
    return;
endif;

if (functionNum == GET_FREE_BLOCK) then
    alias counter R5;
    counter = DISK_FREE_AREA;
    while (counter < DISK_SWAP_AREA) do
        if ([DISK_FREE_LIST + counter] == 0) then
            [DISK_FREE_LIST + counter] = 1;
            R0 = counter;

            // breakpoint;
            return;
        endif;
        counter = counter + 1;
    endwhile;

    R0 = -1;
    // breakpoint;
    return;
endif;

// release block
if (functionNum == RELEASE_BLOCK) then
    [DISK_FREE_LIST + R2] = 0;
    return;
endif;

if (functionNum == GET_CODE_PAGE) then
    // breakpoint;
    alias blockNumber R2;
    alias i R5;
    alias j R6;
    i = 0;
    j = 4;
    while (i < MAX_PROC_NUM) do
        while (j < 8) do
            if ([DISK_MAP_TABLE + 10*i + j] == blockNumber && [PAGE_TABLE_BASE + 20*i + 2*j] != -1) then
                R0 = [PAGE_TABLE_BASE + 20*i + 2*j];
                [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + 20*i + 2*j]] = [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + 20*i + 2*j]] + 1;
                // breakpoint;
                return;
            endif;
            j = j + 1;
        endwhile;
        j = 4;
        i = i + 1;
    endwhile;

    multipush (R1, R2, R5, R6);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    multipop  (R1, R2, R5, R6);

    alias pageNumber R0;
    multipush (R0, R1, R2, R5, R6);
    R1 = DISK_LOAD;
    R3 = R0;
    R4 = R2;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call DEVICE_MANAGER;
    multipop (R0, R1, R2, R5, R6);

    // breakpoint;
    return;
endif;

if (functionNum == GET_SWAP_BLOCK) then
    alias counter R5;
    counter = DISK_SWAP_AREA;
    while (counter < DISK_SIZE) do
        if ([DISK_FREE_LIST + counter] == 0) then
            [DISK_FREE_LIST + counter] = 1;
            R0 = counter;

            return;
        endif;
        counter = counter + 1;
    endwhile;

    R0 = -1;
    return;
endif;
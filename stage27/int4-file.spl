// breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;

// instructionPointer+2, returnValue, Arguement3, Arguement2, Arguement1, systemCallNumber

alias userSP R0;
userSP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+ 1]*16 + 13];

alias currentPCB R10;
currentPCB = PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16;

alias returnAddress R11;
returnAddress = [PTBR + 2*((userSP-1)/512)]*512 + (userSP-1)%512;

alias systemCallNumber R1;
systemCallNumber = [[PTBR + 2*((userSP-5)/512)]*512 + (userSP-5)%512];

alias fileName R2;
fileName = [[PTBR + 2*((userSP-4)/512)]*512 + (userSP-4)%512];

if (systemCallNumber == INT_CREATE) then
    [currentPCB + 9] = 1;

    alias filePermission R3;
    filePermission = [[PTBR + 2*((userSP-3)/512)]*512 + (userSP-3)%512];

    alias counter R5;
    counter = 0;
    while (counter < MAX_FILE_NUM) do
        if ([INODE_TABLE + counter*16 + 1] == fileName) then
            [returnAddress] = 0;
            [currentPCB + 9] = 0;
            SP = userSP;

            // breakpoint;
            ireturn;
        endif;
        counter = counter + 1;
    endwhile;

    alias inodeIndex R4;
    counter = 0;
    while (counter < MAX_FILE_NUM) do
        if ([INODE_TABLE + counter*16 + 1] == -1) then
            inodeIndex = counter;
            break;
        endif;
        counter = counter + 1;
    endwhile;

    if (counter == MAX_FILE_NUM) then
        [returnAddress] = -1;
        [currentPCB + 9] = 0;
        SP = userSP;

        // breakpoint;
        ireturn;
    endif;

    alias inodeEntry R6;
    inodeEntry = INODE_TABLE + 16*inodeIndex;
    [inodeEntry + 0] = DATA;
    [inodeEntry + 1] = fileName;
    [inodeEntry + 2] = 0;
    [inodeEntry + 3] = [currentPCB + 3];
    [inodeEntry + 4] = [SYSTEM_STATUS_TABLE+1];
    if (filePermission == EXCLUSIVE) then
        [inodeEntry + 4] = EXCLUSIVE;
    endif;
    
    counter = 8;
    while (counter < 12) do
        [inodeEntry + counter] = -1;
        counter = counter + 1;
    endwhile;

    alias rootFileEntry R7;
    rootFileEntry = ROOT_FILE + inodeIndex*8;
    [rootFileEntry + 0] = fileName;
    [rootFileEntry + 1] = 0;
    [rootFileEntry + 2] = DATA;
    [rootFileEntry + 3] = [inodeEntry + 3];
    [rootFileEntry + 4] = filePermission;

    [returnAddress] = 0;
    [currentPCB + 9] = 0;
    SP = userSP;

    // breakpoint;
    ireturn;
endif;

if (systemCallNumber == INT_DELETE) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE]*16 + 9] = 4;

    alias inodeIndex R3;
    alias counter R5;
    counter = 0;
    while (counter < MAX_FILE_NUM) do
        if ([INODE_TABLE + counter*16 + 1] == fileName) then
            inodeIndex = counter;
            break;
        endif;
        counter = counter + 1;
    endwhile;

    if (counter == MAX_FILE_NUM) then
        [returnAddress] = 0;
        [currentPCB + 9] = 0;
        SP = userSP;

        // breakpoint;
        ireturn;
    endif;

    alias inodeEntry R4;
    inodeEntry = INODE_TABLE + 16*inodeIndex;
    if ([inodeEntry] != DATA) then
        [returnAddress] = -1;
        [currentPCB + 9] = 0;
        SP = userSP;

        // breakpoint;
        ireturn;
    endif;

    if (([inodeEntry + 4] == EXCLUSIVE && 
            ([inodeEntry + 3] != [SYSTEM_STATUS_TABLE] && [SYSTEM_STATUS_TABLE] != ROOT))) then
        [returnAddress] = -1;
        [currentPCB + 9] = 0;
        SP = userSP;

        // breakpoint;
        ireturn;
    endif;

    multipush (R0, R1, R2, R3, R4, R10, R11);
    R1 = ACQUIRE_INODE;
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop (R0, R1, R2, R3, R4, R10, R11);

    if ([FILE_STATUS_TABLE + 4*inodeIndex + 1] != -1) then
        multipush (R0, R1, R2, R3, R4, R10, R11);
        R1 = RELEASE_INODE;
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE+1];
        call RESOURCE_MANAGER;
        multipop (R0, R1, R2, R3, R4, R10, R11);

        [returnAddress] = -2;
        [currentPCB + 9] = 0;
        SP = userSP;

        // breakpoint;
        ireturn;        
    endif;

    counter = 8;
    while (counter <= 11) do
        if ([inodeEntry + counter] != -1) then
            if ([BUFFER_TABLE + ([inodeEntry + counter] % MAX_BUFFER)] == [inodeEntry + counter]) then
                [BUFFER_TABLE + ([inodeEntry + counter] % MAX_BUFFER) + 1] = 0;
            endif;

            multipush (R0, R1, R2, R3, R4, R5, R10, R11);
            R1 = RELEASE_BLOCK;
            R2 = [inodeEntry + counter];
            R3 = [SYSTEM_STATUS_TABLE+1];
            call MEMORY_MANAGER;
            multipop (R0, R1, R2, R3, R4, R5, R10, R11);
        endif;
        counter = counter + 1;
    endwhile;

    counter = 0;
    while (counter < 16) do
        [inodeEntry + counter] = -1;
        counter = counter + 1;
    endwhile;
    [inodeEntry + 2] = 0;

    [ROOT_FILE + inodeIndex*8 + 0] = -1;
    [ROOT_FILE + inodeIndex*8 + 1] = 0;
    [ROOT_FILE + inodeIndex*8 + 2] = -1;
    [ROOT_FILE + inodeIndex*8 + 3] = -1;
    [ROOT_FILE + inodeIndex*8 + 4] = -1;

    multipush (R0, R1, R2, R3, R4, R10, R11);
    R1 = RELEASE_INODE;
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE+1];
    call RESOURCE_MANAGER;
    multipop (R0, R1, R2, R3, R4, R10, R11);

    [returnAddress] = 0;
    [currentPCB + 9] = 0;
    SP = userSP;

    // breakpoint;
    ireturn;
endif;
